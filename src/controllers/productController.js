const Product = require('../models/productModel');

const productController = {
  // üìå L·∫•y t·∫•t c·∫£ s·∫£n ph·∫©m
  getAllProducts: async (req, res) => {
    try {
      const products = await Product.getAll();
      res.status(200).json(products);
    } catch (error) {
      console.error('L·ªói khi l·∫•y danh s√°ch s·∫£n ph·∫©m:', error);
      res.status(500).json({ message: 'L·ªói server' });
    }
  },

  // üìå L·∫•y s·∫£n ph·∫©m theo T√äN
  getProductByName: async (req, res) => {
    try {
      const { name } = req.params;
      const product = await Product.getByName(name);
      if (!product) return res.status(404).json({ message: 'S·∫£n ph·∫©m kh√¥ng t·ªìn t·∫°i' });

      res.status(200).json(product);
    } catch (error) {
      console.error('L·ªói khi l·∫•y s·∫£n ph·∫©m:', error);
      res.status(500).json({ message: 'L·ªói server' });
    }
  },

  // üìå Th√™m s·∫£n ph·∫©m m·ªõi
  createProduct: async (req, res) => {
    try {
      const { name, description, price, stock, image_url } = req.body;
      if (!name || !price || !stock) {
        return res.status(400).json({ message: 'Thi·∫øu th√¥ng tin b·∫Øt bu·ªôc' });
      }

      const newProduct = await Product.create({ name, description, price, stock, image_url });
      res.status(201).json({ message: 'Th√™m s·∫£n ph·∫©m th√†nh c√¥ng', product: newProduct });
    } catch (error) {
      console.error('L·ªói khi th√™m s·∫£n ph·∫©m:', error);
      res.status(500).json({ message: 'L·ªói server' });
    }
  },

  // üìå C·∫≠p nh·∫≠t s·∫£n ph·∫©m theo T√äN
  updateProductByName: async (req, res) => {
    try {
      const { name } = req.params;
      const { description, price, stock, image_url } = req.body;

      const updatedProduct = await Product.updateByName(name, { description, price, stock, image_url });
      if (!updatedProduct) return res.status(404).json({ message: 'S·∫£n ph·∫©m kh√¥ng t·ªìn t·∫°i' });

      res.status(200).json({ message: 'C·∫≠p nh·∫≠t s·∫£n ph·∫©m th√†nh c√¥ng', product: updatedProduct });
    } catch (error) {
      console.error('L·ªói khi c·∫≠p nh·∫≠t s·∫£n ph·∫©m:', error);
      res.status(500).json({ message: 'L·ªói server' });
    }
  },

  // üìå X√≥a s·∫£n ph·∫©m theo T√äN
  deleteProductByName: async (req, res) => {
    try {
      const { name } = req.params;
      const deletedProduct = await Product.deleteByName(name);
      if (!deletedProduct) return res.status(404).json({ message: 'S·∫£n ph·∫©m kh√¥ng t·ªìn t·∫°i' });

      res.status(200).json({ message: 'X√≥a s·∫£n ph·∫©m th√†nh c√¥ng' });
    } catch (error) {
      console.error('L·ªói khi x√≥a s·∫£n ph·∫©m:', error);
      res.status(500).json({ message: 'L·ªói server' });
    }
  }
};

module.exports = productController;
